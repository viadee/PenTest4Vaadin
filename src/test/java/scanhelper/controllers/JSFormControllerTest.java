/**
 * BSD 3-Clause License
 *
 * Copyright Â© 2019, viadee Unternehmensberatung AG
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of its
 *   contributors may be used to endorse or promote products derived from
 *   this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package scanhelper.controllers;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.TestContext;
import org.springframework.test.context.TestExecutionListeners;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.context.support.AbstractTestExecutionListener;
import org.springframework.test.context.support.DependencyInjectionTestExecutionListener;
import scanhelper.entities.NativeHtmlMapping;
import scanhelper.entities.UrlMapping;
import scanhelper.entities.VaElement;
import scanhelper.repositories.NativeHtmlMappingRepository;
import scanhelper.repositories.UrlMappingRepository;
import scanhelper.repositories.VaElementRepository;

import javax.annotation.Resource;
import java.util.List;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;

@RunWith(SpringJUnit4ClassRunner.class)
@TestExecutionListeners(listeners = {
        DependencyInjectionTestExecutionListener.class,
        JSFormControllerTest.class})
@ContextConfiguration
@SpringBootTest
public class JSFormControllerTest extends AbstractTestExecutionListener {
    @Autowired
    private VaElementRepository vaElementRepository;
    @Resource(name = "nativeHtmlMappingRepository")
    private NativeHtmlMappingRepository nativeHtmlMappingRepository;
    @Autowired
    private UrlMappingRepository urlMappingRepository;

    @Autowired
    private JSFormController controller;

    @Override
    public void beforeTestClass(TestContext testContext) {
        NativeHtmlMappingRepository nativeHtmlMappingRepository = testContext.getApplicationContext().getBean("nativeHtmlMappingRepository", NativeHtmlMappingRepository.class);

        NativeHtmlMapping mapping = new NativeHtmlMapping();
        mapping.setHtmltag("vaadin-text-field");
        mapping.setNativeHtml("input");
        nativeHtmlMappingRepository.save(mapping);

        mapping = new NativeHtmlMapping();
        mapping.setHtmltag("vaadin-password-field");
        mapping.setNativeHtml("input");
        nativeHtmlMappingRepository.save(mapping);
        assertEquals(2, nativeHtmlMappingRepository.count());
    }

    @Test
    public void testAddForm() {
        String requestbody = "{" +
                "'name': 'testform'," +
                "'applicationUrl': 'http://localhost:8080'," +
                "'elements': [" +
                "{'htmltag': 'vaadin-text-field', 'position': 0, 'orderpos': 1, 'parameter': 'name', 'defaultValue': 'default', 'shadowRoute': '[]'}, " +
                "{'htmltag': 'vaadin-password-field', 'position': 0, 'orderpos': 2, 'parameter': 'password', 'shadowRoute': '[]'}" +
                "]}";

        controller.addForm(requestbody);

        // Assert that form was added.
        assertEquals(urlMappingRepository.count(), 1);
        UrlMapping m = urlMappingRepository.findByName("testform");
        assertEquals("testform", m.getName());
        assertEquals("http://localhost:8080", m.getApplicationurl());

        // Assert that elements were added.
        assertEquals(2, vaElementRepository.count());
        List<VaElement> lists = vaElementRepository.findAll();
        VaElement element = lists.get(0);
        assertEquals(0, (int) element.getPosition());
        assertEquals(1, (int) element.getOrderpos());
        assertEquals("name", element.getParameter());
        assertEquals("default", element.getDefaultValue());
        assertEquals("vaadin-text-field", element.getNativeHtmlMapping().getHtmltag());
        assertEquals("testform", element.getUrlMapping().getName());

        element = lists.get(1);
        assertEquals(0, (int) element.getPosition());
        assertEquals(2, (int) element.getOrderpos());
        assertEquals("password", element.getParameter());
        assertNull(element.getDefaultValue());
        assertEquals("vaadin-password-field", element.getNativeHtmlMapping().getHtmltag());
        assertEquals("testform", element.getUrlMapping().getName());
    }

    @Test
    public void testGetAvailableElements() {
        String elements = controller.getAvailableElements().getBody();
        assertEquals("{\"vaadin-text-field\":\"\",\"vaadin-password-field\":\"\"}", elements);
    }
}
