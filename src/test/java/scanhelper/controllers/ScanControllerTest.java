/**
 * BSD 3-Clause License
 *
 * Copyright Â© 2019, viadee Unternehmensberatung AG
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of its
 *   contributors may be used to endorse or promote products derived from
 *   this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package scanhelper.controllers;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import scanhelper.entities.UrlMapping;
import scanhelper.repositories.UrlMappingRepository;
import scanhelper.services.SeleniumRequestHandler;

import java.util.HashMap;
import java.util.Map;

import static org.junit.Assert.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class ScanControllerTest {
    @Mock
    private UrlMappingRepository urlMappingRepository;
    @Mock
    private SeleniumRequestHandler seleniumRequestHandler;

    @InjectMocks
    private ScanController scanController;

    private final UrlMapping mapping = new UrlMapping();
    private Map<String, String> params;


    @Before
    public void setup() {
        params = new HashMap<>();
        params.put("test", "test");
    }

    @Test
    public void testProcessRequest() {
        when(urlMappingRepository.findByName(eq("testform"))).thenReturn(mapping);
        when(seleniumRequestHandler.getStatusCode()).thenReturn(HttpStatus.OK);
        when(seleniumRequestHandler.sendRequests(eq(mapping), any(Map.class))).thenReturn("Pagecode");

        ResponseEntity<String> response = scanController.processRequest(params, "testform");
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals("Pagecode", response.getBody());
    }

    @Test
    public void testProcessRequestNull() {
        when(urlMappingRepository.findByName(eq("testform"))).thenReturn(mapping);
        when(seleniumRequestHandler.getStatusCode()).thenReturn(HttpStatus.BAD_REQUEST);
        when(seleniumRequestHandler.sendRequests(eq(mapping), any(Map.class))).thenReturn(null);

        ResponseEntity<String> response = scanController.processRequest(params, "testform");
        assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());
    }

    @Test
    public void testInvalidFormname() {
        when(urlMappingRepository.findByName(eq("testform"))).thenReturn(null);
        ResponseEntity<String> response = scanController.processRequest(params, "testform");
        assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());
    }
}
