/**
 * BSD 3-Clause License
 *
 * Copyright Â© 2019, viadee Unternehmensberatung AG
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of its
 *   contributors may be used to endorse or promote products derived from
 *   this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package scanhelper.services;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Spy;
import org.mockito.junit.MockitoJUnitRunner;
import org.openqa.selenium.Alert;
import org.openqa.selenium.NoAlertPresentException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.springframework.http.HttpStatus;
import scanhelper.entities.NativeHtmlMapping;
import scanhelper.entities.UrlMapping;
import scanhelper.entities.VaElement;
import scanhelper.repositories.VaElementRepository;
import scanhelper.services.elements.AbstractAction;
import scanhelper.services.elements.Input;

import java.util.*;

import static org.junit.Assert.assertTrue;
import static org.mockito.ArgumentMatchers.eq;
import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.*;

@RunWith(MockitoJUnitRunner.class)
public class SeleniumRequestHandlerTest {
    @Mock
    private WebDriverWrapper driverWrapper;
    @Mock
    private Input input;
    @Mock
    private ChromeDriver driver;
    @Mock
    private UrlMapping urlMapping;
    @Mock
    private VaElementRepository vaElementRepository;
    @Spy
    private Set<AbstractAction> actionSet = new HashSet<>();
    @Mock
    private WebDriver.TargetLocator targetLocator;
    @Mock
    private Alert alert;

    @InjectMocks
    private SeleniumRequestHandler requestHandler;

    private NativeHtmlMapping mappingText = new NativeHtmlMapping();
    private NativeHtmlMapping mappingPassword = new NativeHtmlMapping();
    private List<VaElement> elements = new ArrayList<>();
    private HashMap<String, String> params = new HashMap<>();

    @Before
    public void init() {
        actionSet.add(input);

        // Create HTML mappings.
        mappingText.setHtmltag("vaadin-text-field");
        mappingText.setNativeHtml("input");
        mappingPassword.setHtmltag("vaadin-password-field");
        mappingPassword.setNativeHtml("input");

        // Create vaadin elements.
        VaElement e = new VaElement();
        e.setParameter("name");
        e.setNativeHtmlMapping(mappingText);
        e.setDefaultValue("dummy");
        e.setPosition(0);
        e.setShadowRoute("[]");
        elements.add(e);

        e = new VaElement();
        e.setParameter("password");
        e.setNativeHtmlMapping(mappingText);
        e.setDefaultValue("placeholder");
        e.setPosition(0);
        e.setShadowRoute("[]");
        elements.add(e);

        // Create parameters.
        params.put("name", "nameVal");
        params.put("password", "passwordVal");

        // Mock method calls.
        when(driverWrapper.getScanDriver()).thenReturn(driver);
        when(urlMapping.getApplicationurl()).thenReturn("http://localhost:8082");
        when(vaElementRepository.findAllByUrlMappingOrderByOrderpos(urlMapping)).thenReturn(elements);
    }

    @Test
    public void testSendRequests() {
        when(input.getName()).thenReturn("input");
        when(driver.executeScript(eq("return document.getElementsByTagName('body')[0].outerHTML;"))).thenReturn("Success");
        when(driver.switchTo()).thenReturn(targetLocator);
        when(targetLocator.alert()).thenThrow(new NoAlertPresentException());

        requestHandler.init();
        String response = requestHandler.sendRequests(urlMapping, params);
        assertEquals("Success", response);
        assertEquals(HttpStatus.OK, requestHandler.getStatusCode());
        verify(input, times(2)).performAction(any(String.class), eq(driver));
    }

    @Test
    public void testXSSAlertIsPresent() {
        params.put("password", "<img src=x onerror=<alert(1);>");

        when(input.getName()).thenReturn("input");
        when(driver.executeScript(eq("return document.getElementsByTagName('body')[0].outerHTML;"))).thenReturn("Here is an alert!");
        when(driver.switchTo()).thenReturn(targetLocator);
        when(targetLocator.alert()).thenReturn(alert);

        requestHandler.init();
        String response = requestHandler.sendRequests(urlMapping, params);
        assertTrue(response.contains("<img src=x onerror=<alert(1);>"));
        assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, requestHandler.getStatusCode());
    }

    @Test
    public void testActionDoesNotExist() {
        requestHandler.init();
        String response = requestHandler.sendRequests(urlMapping, params);
        assertEquals("Internal Error - Action class was not found.", response);
        assertEquals(HttpStatus.NOT_IMPLEMENTED, requestHandler.getStatusCode());
    }
}
