/**
 * BSD 3-Clause License
 *
 * Copyright Â© 2019, viadee Unternehmensberatung AG
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of its
 *   contributors may be used to endorse or promote products derived from
 *   this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package scanhelper.views;

import com.vaadin.flow.component.button.Button;
import com.vaadin.flow.component.combobox.ComboBox;
import com.vaadin.flow.component.grid.Grid;
import com.vaadin.flow.component.grid.Grid.Column;
import com.vaadin.flow.component.grid.editor.Editor;
import com.vaadin.flow.component.html.Anchor;
import com.vaadin.flow.component.html.Div;
import com.vaadin.flow.component.icon.Icon;
import com.vaadin.flow.component.icon.VaadinIcon;
import com.vaadin.flow.component.orderedlayout.HorizontalLayout;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;
import com.vaadin.flow.component.textfield.TextArea;
import com.vaadin.flow.component.textfield.TextField;
import com.vaadin.flow.data.binder.Binder;
import com.vaadin.flow.data.converter.StringToIntegerConverter;
import com.vaadin.flow.router.Route;
import com.vaadin.flow.server.StreamResource;
import scanhelper.entities.NativeHtmlMapping;
import scanhelper.entities.UrlMapping;
import scanhelper.entities.VaElement;
import scanhelper.presenter.FormPresenter;
import org.springframework.beans.factory.annotation.Autowired;

/**
 * View that shows the forms and the associated elements. Editing functionality for the elements is also provided.
 */
@Route(value = "forms", layout = MainView.class)
public class FormView extends VerticalLayout {
    private Grid<VaElement> grid = new Grid<>();

    public FormView(@Autowired FormPresenter presenter) {
        // Actions for browser.
        TextField tfUrl = new TextField("URL");

        Button btnStartFrom = new Button("Start Form Selector", e -> {
            presenter.startBrowserBtnClicked(tfUrl.getValue());
        });

        HorizontalLayout layoutSelector = new HorizontalLayout();
        layoutSelector.add(tfUrl, btnStartFrom);

        // Load forms.
        ComboBox<UrlMapping> cbForms = new ComboBox<>("Forms");
        cbForms.setItemLabelGenerator(UrlMapping::getName);
        cbForms.setItems(presenter.getAllUrlMappings());
        cbForms.addValueChangeListener(e -> {
            grid.setItems(presenter.getAllMappings(cbForms.getValue()));
        });

        // Add action bar.
        Button btnDeleteForm = new Button(new Icon(VaadinIcon.TRASH), e-> {
            presenter.deleteFormMapping(cbForms.getValue());
            cbForms.setItems(presenter.getAllUrlMappings());
            grid.setItems();
        });

        Button btnExportUrls = new Button("Export URLs");
        Anchor downloadUrls = new Anchor(new StreamResource("urls.txt", () -> presenter.exportURLs()), "");
        downloadUrls.getElement().setAttribute("download", true);
        downloadUrls.add(btnExportUrls);

        HorizontalLayout actionbar = new HorizontalLayout();
        actionbar.add(cbForms, btnDeleteForm, downloadUrls);

        // Load form details.
        grid.addColumn(VaElement::getId).setHeader("ID");
        Column<VaElement> htmltagColumn = grid.addColumn(element -> element.getNativeHtmlMapping().getHtmltag()).setHeader("HTML Tag");
        grid.addColumn(VaElement::getPosition).setHeader("Position");
        Column<VaElement> orderposColumn = grid.addColumn(VaElement::getOrderpos).setHeader("Order");
        Column<VaElement> parameterColumn = grid.addColumn(VaElement::getParameter).setHeader("Paramenter");
        Column<VaElement> defaultvalColumn = grid.addColumn(VaElement::getDefaultValue).setHeader("Default value");

        // Create input elements for editing mode.
        ComboBox<NativeHtmlMapping> cbNativeHtml = new ComboBox<>();
        cbNativeHtml.setItemLabelGenerator(NativeHtmlMapping::getHtmltag);
        cbNativeHtml.setItems(presenter.getAllNativeHtmlMappings());

        TextField tfOrderpos = new TextField();
        TextField tfParameter = new TextField();
        TextField tfDefaultVal = new TextField();

        // Add editor.
        Binder<VaElement> binder = new Binder<>(VaElement.class);
        Editor<VaElement> editor = grid.getEditor();
        editor.setBinder(binder);
        editor.setBuffered(true);

        binder.bind(cbNativeHtml, "nativeHtmlMapping");
        htmltagColumn.setEditorComponent(cbNativeHtml);
        binder.forField(tfOrderpos).withConverter(new StringToIntegerConverter("Please insert number!")).bind("orderpos");
        orderposColumn.setEditorComponent(tfOrderpos);
        binder.bind(tfParameter, "parameter");
        parameterColumn.setEditorComponent(tfParameter);
        binder.bind(tfDefaultVal, "defaultValue");
        defaultvalColumn.setEditorComponent(tfDefaultVal);

        Button btnSave = new Button("Save", e -> editor.save());
        Button btnCancel = new Button("Cancel", e -> editor.cancel());
        Div buttons = new Div(btnSave, btnCancel);

        Column<VaElement> editorColumn = grid.addComponentColumn(element -> {
           Button btnEdit = new Button(new Icon(VaadinIcon.EDIT));
            btnEdit.addClickListener( e -> editor.editItem(element));
            return btnEdit;
        });
        editorColumn.setEditorComponent(buttons);

        editor.addSaveListener(event -> {
            presenter.saveElement(event.getItem());
        });

        this.add(layoutSelector, actionbar, grid);
    }
}
