/**
 * BSD 3-Clause License
 *
 * Copyright Â© 2019, viadee Unternehmensberatung AG
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of its
 *   contributors may be used to endorse or promote products derived from
 *   this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package scanhelper.services;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

/**
 * Wrapper class for the selenium web drivers. Using a wrapper prevents the browsers to be opened at beginning.
 */
@Service
public class WebDriverWrapper {
    private static final Logger LOG = LoggerFactory.getLogger(WebDriverWrapper.class);
    private WebDriver browserDriver;
    private WebDriver scanDriver;
    private boolean headless = true;

    public WebDriver getBrowserWebDriver() {
        if(browserDriver == null) {
            LOG.debug("Instantiate new driver for the browser.");
            ChromeOptions options = new ChromeOptions();
            options.addArguments("disable-infobars");
            options.addArguments("--disable-web-security");
            browserDriver = new ChromeDriver(options);
        }
        return browserDriver;
    }

    public void resetBrowserDriver() {
        LOG.debug("Reset web driver for the browser.");
        if(browserDriver != null) {
            browserDriver.quit();
        }
        browserDriver = null;
    }

    public WebDriver getScanDriver() {
        if(scanDriver == null) {
            if(headless) {
                LOG.debug("Instantiate new headless driver for the scanner.");
                ChromeOptions options = new ChromeOptions();
                options.addArguments("--headless", "--disable-gpu", "--window-size=1920,1200", "--ignore-certificate-errors");
                scanDriver = new ChromeDriver(options);
            }
            else {
                LOG.debug("Instantiate new driver for the scanner.");
                scanDriver = new ChromeDriver();
            }
        }
        return scanDriver;
    }

    public void setScanDriverHeadless(boolean headless) {
        LOG.debug("Change headless mode of scanner driver to '"+headless+"'");
        this.headless = headless;
        resetScanDriver();
    }

    public void resetScanDriver() {
        if(scanDriver != null) {
            scanDriver.quit();
        }
        LOG.debug("Reset web driver for the scanner.");
        scanDriver = null;
    }
}
