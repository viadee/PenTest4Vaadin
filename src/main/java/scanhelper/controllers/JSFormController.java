/**
 * BSD 3-Clause License
 *
 * Copyright Â© 2019, viadee Unternehmensberatung AG
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of its
 *   contributors may be used to endorse or promote products derived from
 *   this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package scanhelper.controllers;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import scanhelper.entities.NativeHtmlMapping;
import scanhelper.entities.UrlMapping;
import scanhelper.entities.VaElement;
import scanhelper.repositories.NativeHtmlMappingRepository;
import scanhelper.repositories.UrlMappingRepository;
import scanhelper.repositories.VaElementRepository;

/**
 * Controller for handling the JavaScript requests of the Form Selector Script.
 * Exposes endpoint for adding a form.
 */
@RestController
public class JSFormController {
    private static final Logger LOG = LoggerFactory.getLogger(JSFormController.class);

    @Autowired
    private UrlMappingRepository urlMappingRepository;
    @Autowired
    private VaElementRepository vaElementRepository;
    @Autowired
    private NativeHtmlMappingRepository nativeHtmlMappingRepository;

    /**
     * Adds a new form and its associated elements to the database.s
     *
     * @param newForm JSON String that contains the form parameters
     */
    @RequestMapping(value = "/addForm", method = RequestMethod.POST)
    public void addForm(@RequestBody String newForm) {

        try {
            JSONObject params = new JSONObject(newForm);

            // Create UrlMapping.
            UrlMapping urlParams = new UrlMapping();
            urlParams.setName(params.getString("name"));
            urlParams.setApplicationurl(params.getString("applicationUrl"));

            urlMappingRepository.save(urlParams);
            LOG.debug("New Form named '" + params.getString("name") + "' was created.");

            // Create Elements.
            VaElement newElement;
            JSONArray elements = params.getJSONArray("elements");

            for (int i = 0; i < elements.length(); i++) {
                JSONObject el = elements.getJSONObject(i);
                newElement = new VaElement();
                newElement.setPosition(el.getInt("position"));
                newElement.setOrderpos(el.getInt("orderpos"));
                newElement.setParameter(el.getString("parameter"));
                if (el.has("defaultValue") && !el.getString("defaultValue").isEmpty()) {
                    newElement.setDefaultValue(el.getString("defaultValue"));
                }
                newElement.setNativeHtmlMapping(nativeHtmlMappingRepository
                        .findNativeHtmlMappingByHtmltag(el.getString("htmltag").toLowerCase()));
                newElement.setUrlMapping(urlParams);
                newElement.setShadowRoute(el.getString("shadowRoute"));
                vaElementRepository.save(newElement);
            }

            LOG.debug(elements.length() + " elements were added to the Form '" + params.getString("name"));

        } catch (JSONException e) {
            LOG.error("JSON parsing failed: .", e);
        }
    }

    /**
     * Returns a list of the Html Tags of all available elements.
     *
     * @return List of html tags
     */
    @RequestMapping(value = "/getAvailableElements*", method = RequestMethod.GET)
    public ResponseEntity<String> getAvailableElements() {
        // Load all elements.
        JSONObject allElements = new JSONObject();

        try {
            for (NativeHtmlMapping htmlMapping : nativeHtmlMappingRepository.findAll()) {
                if(htmlMapping.getDefaultValue() == null) {
                    allElements.put(htmlMapping.getHtmltag(), "");
                }
                else {
                    allElements.put(htmlMapping.getHtmltag(), htmlMapping.getDefaultValue());
                }
            }
        } catch (JSONException e) {
            e.printStackTrace();
        }

        LOG.debug("This list of available HTML elements is sent to a client: " + allElements.toString());
        return new ResponseEntity<>(allElements.toString(), HttpStatus.OK);
    }
}
