/**
 * BSD 3-Clause License
 *
 * Copyright Â© 2019, viadee Unternehmensberatung AG
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of its
 *   contributors may be used to endorse or promote products derived from
 *   this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package scanhelper.presenter;

import com.vaadin.flow.server.StreamResource;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import scanhelper.entities.NativeHtmlMapping;
import scanhelper.entities.UrlMapping;
import scanhelper.entities.VaElement;
import scanhelper.repositories.NativeHtmlMappingRepository;
import scanhelper.repositories.UrlMappingRepository;
import scanhelper.repositories.VaElementRepository;
import scanhelper.services.SeleniumBrowser;

import java.io.ByteArrayInputStream;
import java.util.List;

@Component
public class FormPresenter {
    private static final Logger LOG = LoggerFactory.getLogger(FormPresenter.class);

    @Autowired
    private SeleniumBrowser browser;
    @Autowired
    private VaElementRepository vaElementRepository;
    @Autowired
    private UrlMappingRepository urlMappingRepository;
    @Autowired
    private NativeHtmlMappingRepository nativeHtmlMappingRepository;

    @Value("${server.port}")
    private String serverPort;

    @Value("${server.address}")
    private String serverAddress;

    public void startBrowserBtnClicked(String url) {
        browser.startBrowser(url);
    }

    public List<VaElement> getAllMappings(UrlMapping mapping) {
        return vaElementRepository.findAllByUrlMappingOrderByOrderpos(mapping);
    }

    public void deleteFormMapping(UrlMapping value) {
        LOG.debug("Deleting the form '" + value.getName() + "' and all associated elements.");
        vaElementRepository.deleteVaElementsByUrlMapping(value);
        urlMappingRepository.delete(value);
    }

    public List<UrlMapping> getAllUrlMappings() {
        return urlMappingRepository.findAll();
    }

    public List<NativeHtmlMapping> getAllNativeHtmlMappings() {
        return nativeHtmlMappingRepository.findAll();
    }

    public void saveElement(VaElement item) {
        LOG.debug("Update element with HTML Tag '" + item.getNativeHtmlMapping().getHtmltag() + "' of form '" + item.getUrlMapping().getName() + "'.");
        vaElementRepository.save(item);
    }

    /**
     * Exports all urls to a text file.
     * @return StreamResource of file
     */
    public ByteArrayInputStream exportURLs() {
        // Create string of all urls.
        StringBuilder filecontents = new StringBuilder();
        List<VaElement> elements;
        VaElement el;

        for (UrlMapping mapping : urlMappingRepository.findAll()) {
            filecontents.append("http://" + serverAddress + ":" + serverPort + "/scan/" + mapping.getName());

            elements = vaElementRepository.findAllByUrlMappingOrderByOrderpos(mapping);
            if(elements.size() > 0) {
                filecontents.append("?");
            }

            for (int i = 0; i < elements.size(); i++) {
                el = elements.get(i);
                // Export only parameters that are injectable.
                if (el.getDefaultValue() == null || el.getDefaultValue().isEmpty()) {
                    filecontents.append(el.getParameter() + "=" + "val" + "&");
                }
            }
            if(filecontents.charAt(filecontents.length()-1) == '&') {
                filecontents.deleteCharAt(filecontents.length()-1);
            }

            filecontents.append("\n");
        }

        // Return byte stream of string.
       return new ByteArrayInputStream(filecontents.toString().getBytes());
    }
}
